(function() {

    angular
        .module('hoj', [
            // AngularJS Dependencies
            'ui.router',
            'ngNotify',
            'rt.debounce'
        ])

        // .factory('AuthTokenInterceptorService', function () {
        //     return {
        //         request: function (config) {
        //             var token = window.localStorage.getItem("accessToken");
        //             if (token) {
        //                 console.log(token);
        //                 config.headers['x-access-token'] = token;
        //             }
        //             return config;
        //         }
        //     };
        // })

        /**
         * Response interceptors are executed in reverse order.
         * We want to intercept expired sessions first, therefore we add it
         * as the last interceptor
         */
        .config(function($httpProvider) {
            // Template Cache Busting (request)
            // $httpProvider.interceptors.push('TemplateInterceptorService');
            // // Auth token (request)
            // $httpProvider.interceptors.push('AuthTokenInterceptorService');
            // // HTTP Error (responseError)
            // $httpProvider.interceptors.push('HttpErrorInterceptorService');
            // // Session Expired (responseError)
            // $httpProvider.interceptors.push('SessionExpiredInterceptorService');
        })

        .run(AppRun);

    function AppRun(
        $log,
        // $rootScope,
        // $window
        ngNotify
    ) {
        $log.log("Application module is initialized ...");

        // Set 3rd party libraries on the $rootScope so that they can be used throughout the application.
        // $rootScope._ = $window._;
        // $rootScope.AWS = $window.AWS;
        ngNotify.config({
            theme: 'pure',
            position: 'bottom',
            duration: 4000,
            type: 'info',
            sticky: false,
            button: true,
            html: false
        });

    }



})();

(function() {

    angular
        .module('hoj')
        .config(AppRoutes);

    function AppRoutes(
        $locationProvider,
        $stateProvider,
        $urlRouterProvider
    ) {

        /**
         * If the route does not exist, redirect the user to the 'login' route.
         */
        $urlRouterProvider.otherwise('/login');

        $stateProvider
            .state('app', {
                abstract: true,
                templateUrl: 'app/app.layout.html',
                data: {
                    authenticate: true
                }
            })
            .state('app.403', {
                url: '/403',
                templateUrl: 'app/app.403.html'
            })
            .state('app.500', {
                url: '/500',
                templateUrl: 'app/app.500.html'
            })
            .state('app.login', {
                url: '/login',
                templateUrl: 'app/auth/views/login.view.html',
                controller: 'LoginController',
                controllerAs: 'login'
            })
            .state('app.search', {
                url: '/search',
                templateUrl: 'app/search/views/search.view.html',
                controller: 'SearchController',
                controllerAs: 'search'
            })

        $locationProvider.html5Mode(false).hashPrefix('!');
    }

    angular
        .module('hoj')
        .run(function ($rootScope, $state, AuthService, AUTH_EVENTS) {
            $rootScope.$on('$stateChangeStart', function (event,next, nextParams, fromState) {
                if (!AuthService.isAuthenticated()) {
                    console.log(next.name);
                    if (next.name !== 'app.login' && next.name !== 'app') {
                        event.preventDefault();
                        //$state.go('app.login');
                        $state.go('app.search');
                    }
                }
                else {
                    if (next.name == 'app.login') {
                        console.log("test");
                        event.preventDefault();
                        $state.go('app.search');
                    }
                }
            });
        });

})();

(function() {

    angular
        .module('hoj')
        .controller('SearchController', SearchController);

    function SearchController(
        AuthService,
        SearchService,
        $state,
        ngNotify,
        API_ENDPOINT,
        ENVIRONMENT,
        ERROR_CODES,
        $window,
        debounce,
        $element
    ) {
        var vm = this;

        vm.logout = logout;
        vm.performSearch = performSearch;
        vm.user = getUser();
        vm.trimName = trimName;

        activate();

        function activate(){
            vm.loading = false;
            vm.searchTerm = "";
            vm.results = [];
        }

        function performSearch() {
            vm.loading = true;
            SearchService.searchTerm(vm.searchTerm)
                .then(function(response) {
                    vm.loading = false;
                    vm.results = response.data;

                })
                .catch(function (response) {
                    ngNotify.set("And error occured looking for images.", {
                        type: 'error'
                    })
                });
        }

        function getUser() {
            return AuthService.getUser();
        }

        function logout() {
            AuthService.logout();
            $state.go('app.login');
            ngNotify.set('You have successfuly signed out!', {
                type: 'info'
            })
        }

        function trimName(name) {
            if (name.length > 30){
                return name.substring(0, 30) + "...";
            } else {
                return name;
            }
        }

    }

})();

(function() {

    angular
        .module('hoj')
        .service('SearchService', SearchService);

        function SearchService(
            $q,
            $http,
            API_ENDPOINT,
            ENVIRONMENT,
            AuthService
        ) {

            var searchService = {
                searchTerm: searchTerm
            };

            function searchTerm(searchTerm) {
                var user = AuthService.getUser();
                return $q(function(resolve, reject) {
                    $http.post(API_ENDPOINT[ENVIRONMENT] + '/files', {
                        searchTerm: searchTerm
                    })
                    .then(function(response){
                        if (response.data.success){
                            resolve(response.data);
                        } else {
                            reject(response.data);
                        }
                    })
                    .catch(function(response){
                        reject(response);
                    })
                });
            }

            return searchService;
        }

})();

(function() {
    angular
        .module('hoj')
        .constant('AUTH_EVENTS', {
            notAuthenticated: 'auth-not-authenticated'
        })
        .constant('ENVIRONMENTS', [
            'DEVELOPMENT',
            'PRODUCTION'
        ])
        .constant('API_ENDPOINT', {
            //'DEVELOPMENT': 'http://159.89.173.113:4000/api',
            'DEVELOPMENT': 'http://localhost:4000/api',
            'PRODUCTION': "https://hoj-api.herokuapp.com/api"
        })
        .constant('ENVIRONMENT', 'DEVELOPMENT')
        .constant("ERROR_CODES", {
            INVALID_TOKEN: "INVALID_TOKEN",
            FAILED_AUTHENTICATE_TOKEN: "FAILED_AUTHENTICATE_TOKEN",
            ROUTE_BLOCKED: "ROUTE_BLOCKED",
            ACCESS_DENIED: "ACCESS_DENIED",
            INTERNAL_ERROR: "INTERNAL_ERROR",
            AUTHENTICATION_FAILED: "AUTHENTICATION_FAILED",
            USER_DOES_NOT_EXIST: "USER_DOES_NOT_EXIST",
            INVALID_RESET_TOKEN: "INVALID_RESET_TOKEN",
            VALIDATION_ERROR: "VALIDATION_ERROR",
            FILES_ERROR: "FILES_ERROR"
        });
})();

(function() {

    angular
        .module('hoj')
        .controller('LoginController', LoginController);

    function LoginController(
        AuthService,
        $state,
        ngNotify
    ) {
        var vm = this;

        vm.login = login;

        activate();

        function activate(){
            vm.username = "";
            vm.password = "";
        }

        function login(){
            AuthService.login(vm.username, vm.password)
                .then(function(response){
                    $state.go('app.search');
                    ngNotify.set('You have successfuly signed in!', {
                        type: 'success'
                    })
                })
                .catch(function(response){
                    ngNotify.set(response.message, {
                        type: 'error'
                    })
                });
        }

    }

})();

(function() {

    angular
        .module('hoj')
        .service('AuthService', AuthService);

        function AuthService(
            $q,
            $http,
            API_ENDPOINT,
            ENVIRONMENT
        ) {

            var LOCAL_USER = "user";
            var LOCAL_TOKEN_KEY = "accessToken";
            var _isAuthenticated = false;
            var accessToken;

            var authService = {
                login: login,
                logout: logout,
                isAuthenticated: isAuthenticated,
                getUser: getUser,
                getToken: getToken,
            };

            function _loadUserCredentials() {
                var token = window.localStorage.getItem(LOCAL_TOKEN_KEY);
                if (token) {
                    _useCredentials(token);
                }
            }

            function _storeUserCredentials(token) {
                window.localStorage.setItem(LOCAL_TOKEN_KEY, token);
                _useCredentials(token);
            }

            function _storeUser(user) {
                window.localStorage.setItem(LOCAL_USER, JSON.stringify(user));
            }

            function _useCredentials(token) {
                _isAuthenticated = true;
                authToken = token;

                // Set the token as header for your requests!
                $http.defaults.headers.common['x-access-token'] = authToken;
            }

            function _destroyUserCredentials() {
                authToken = undefined;
                _isAuthenticated = false;
                $http.defaults.headers.common['x-access-token'] = undefined;
                window.localStorage.removeItem(LOCAL_TOKEN_KEY);
            }

            function login(username, password) {
                return $q(function(resolve, reject) {
                    $http.post(API_ENDPOINT[ENVIRONMENT] + '/authenticate', {
                        username: username,
                        password: password
                    }).then(function(result) {
                        if (result.data.success) {
                            _storeUserCredentials(result.data.token);
                            _storeUser(result.data.user);
                            resolve(result.data);
                        } else {
                            reject(result.data);
                        }
                    });
                });
            };

            function logout() {
                _destroyUserCredentials();
            };

            function isAuthenticated() {
                return _isAuthenticated;
            }

            function getUser() {
                var userString = window.localStorage.getItem(LOCAL_USER);
                if (userString){
                    return JSON.parse(userString);
                }
                return null;
            }

            function getToken() {
                var token = window.localStorage.getItem(LOCAL_TOKEN_KEY);
                if (token){
                    return token
                }
                return null;
            }

            _loadUserCredentials();

            return authService;
        }

})();
